// clock chip need and read via port //



; Define memory locations
timer_value      equ 0x8000   ; Memory location to store timer/counter value
frequency_low    equ 0x8002   ; Memory location to store low byte of frequency
frequency_high   equ 0x8003   ; Memory location to store high byte of frequency

; Define I/O port addresses
timer_port        equ 0xFF00    ; Port address for timer configuration
timer_value_port  equ 0xFF02    ; Port address for reading timer value

; Define constants
frequency_divisor equ 16      ; Divisor for frequency calculation
clock_frequency  equ 4000000  ; Assume a 4 MHz clock frequency

main_loop:
  ; Read timer/counter value
  ld bc, timer_value_port   ; Load the 16-bit port address into BC
  in a, (C)                 ; Input the value from the I/O port specified by BC into A
  ld (timer_value), a       ; Store the value from A into the timer_value memory location

  ; Calculate frequency
  ld a, (timer_value)
  inc a
  ld l, a
  ld hl, (timer_value + 1)  ; Load the low byte and the high byte from memory into HL
  ld de, (timer_value + 3)  ; Load the second high byte and the low byte from memory into DE
  ex de, hl                 ; Exchange the values between DE and HL

  ; Divide timer value by frequency divisor
  ld bc, clock_frequency / frequency_divisor
  call div16

  ; Store frequency
  ld hl, frequency_low
  ld (hl), l
  inc hl
  ld (hl), h

  ; Add a delay here (if needed) to control the frequency checking rate
  
  ; Repeat the loop
  jp main_loop

; Divide 16-bit number in HL by 16 (in-place division)
div16:
  xor a          ; Clear A register
  ld b, 4        ; Number of divisions (4-bit shift)
div16_loop:
  srl h          ; Shift right HL (divide by 2)
  rr l
  djnz div16_loop
  ret
