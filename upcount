; Start of the program
ORG 0x0000  ; Origin, set program start address

START:  ; Entry point of the program

; Initialize HL, DE to 0000
LD HL, 0
LD DE, 0

; Loop to increment HL and handle overflow
COUNT_LOOP:
    ; Increment HL
    INC HL

    ; Check if HL has reached FFFF (0xFFFF)
    LD A, L   ; Load the least significant byte of HL into A
    CP 0xFF   ; Compare A with 0xFF
    JP NZ, CONTINUE  ; If not, continue

    LD A, H   ; Load the most significant byte of HL into A
    CP 0xFF   ; Compare A with 0xFF
    JP NZ, CONTINUE  ; If not, continue

    ; Overflow occurred, increment E and check for overflow in DE
    INC E
    LD A, E
    CP 0x00
    JP NZ, DE_NO_OVERFLOW

    ; If E overflowed, increment D and reset E
    INC D
    LD A, D
    CP 0x00
    JP NZ, DE_NO_OVERFLOW

    ; If D also overflowed, reset DE
    LD DE, 0

DE_NO_OVERFLOW:

CONTINUE:
    ; Continue counting since HL will naturally overflow to 0000
    JP COUNT_LOOP  ; Jump back to the beginning of the loop

END:
    ; Your program ends here
    HALT  ; Halt the CPU

END  ; End of the program
