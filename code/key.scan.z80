; Keypad Handling Code for Z80 with 74C923 and NMI

KEYPRESS_FLAG       EQU $0825         ; Memory location to store key press flag
KEY_INPUT_BUFFER    EQU $0820         ; Memory location to store input key
KEYPAD_PORT         EQU $03           ; Port for reading keypad input (from 74C923)
MASK_VALUE          EQU $1F           ; Mask value to isolate the key value

; Main Program Initialization
START:
    DI                          ; Disable interrupts initially
    LD A,0                      ; Clear key press flag
    LD (KEYPRESS_FLAG),A         ; Initialize key press flag to 0
    EI                          ; Enable interrupts

MAIN_LOOP:
    ; Wait for NMI to trigger, check the flag in main loop
    LD A,(KEYPRESS_FLAG)         ; Load the key press flag
    CP 0                         ; Check if key press flag is still 0
    JR Z,MAIN_LOOP               ; If no key press, continue looping

    ; Key was pressed
    LD A,(KEY_INPUT_BUFFER)      ; Load the key from the input buffer
    ; Handle key press action here (for example, print or execute a command based on the key)

    ; Reset key press flag
    LD A,0
    LD (KEYPRESS_FLAG),A         ; Clear the flag
    JR MAIN_LOOP                 ; Return to the main loop

; NMI Interrupt Handler - triggered when the keypad is pressed
ORG $0066                        ; NMI vector address for Z80
NMI_HANDLER:
    PUSH AF                      ; Save registers
    PUSH HL
    PUSH DE
    PUSH BC

    IN A,(KEYPAD_PORT)            ; Read the key value from the 74C923 keypad via port 03
    AND MASK_VALUE                ; Mask to isolate the key bits (lower 5 bits only)
    LD (KEY_INPUT_BUFFER),A       ; Store the key in the input buffer
    LD A,$FF                      ; Set key press flag
    LD (KEYPRESS_FLAG),A          ; Store the flag indicating a key was pressed

    ; (Optional) Handle debounce logic here if necessary

    POP BC                       ; Restore registers
    POP DE
    POP HL
    POP AF
    RETN                         ; Return from NMI interrupt

; Wait for further key press after handling the NMI
WAIT_FOR_KEY_PRESS:
    ; Placeholder for additional logic if needed
    RET
