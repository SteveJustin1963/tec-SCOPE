\ Define memory locations
\ These can be implemented as variables
VARIABLE pulse_start_time   \ Memory location to store pulse start time
VARIABLE pulse_duration     \ Memory location to store pulse duration

\ Define I/O port addresses
\ These can be constants
CREATE pulse_input_port  FF00   \ Port address for reading pulse input

\ Initialize memory locations
: initialize-memory
    0 pulse_start_time !
    0 pulse_duration !
;

\ Wait for a rising edge on the pulse input
: wait-for-rising-edge
    BEGIN
        pulse_input_port IN  1 AND 0=
    UNTIL
;

\ Record the start time
: record-start-time
    GET-CURRENT-TIME  \ Implement this word to get the current time
    pulse_start_time !  \ Store the start time
;

\ Wait for a falling edge on the pulse input
: wait-for-falling-edge
    BEGIN
        pulse_input_port IN  1 AND 1=
    UNTIL
;

\ Calculate the pulse duration and store it
: calculate-pulse-duration
    GET-CURRENT-TIME   \ Get the current time again
    pulse_start_time @  \ Load the start time
    OVER -              \ Calculate the time difference
    pulse_duration !    \ Store the pulse duration
;

\ Main loop
: main-loop
    initialize-memory
    BEGIN
        wait-for-rising-edge
        record-start-time
        wait-for-falling-edge
        calculate-pulse-duration
        \ Continue processing or output results as needed
    AGAIN
;

\ Entry point
main-loop 
